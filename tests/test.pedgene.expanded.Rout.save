
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> ## Expanded test script for pedgene package
> 
> require(pedgene)
Loading required package: pedgene
Loading required package: Matrix
Loading required package: lattice
Loading required package: CompQuadForm
Loading required package: kinship2
Loading required package: quadprog
> 
> data(example.ped)
> data(example.geno)
> data(example.map)
> 
> ######################################
> ## From Dan Weeks, issues to check
> ######################################
> ## 1) missid ="0" when the rest of the ids are character
> ## 2) skip pedigree checking, checkpeds=TRUE/FALSE
> ## 3) character alleles
> ## 4) disconnected pedigrees
> ## 5) "flipped" 0/2 geno counts
> 
> #########################################################
> ## Original results for this test case, on non-X chrom.
> #########################################################
> ## X-chrom Burden p-val is .00515
> ## we also do the Davies p-value for the kernel test, so will be slightly different
> #$stat.kernel pedl
> #[1] 80.10206
> #$pval.kernel
> #[1] 0.4039026
> #$stat.burden
> #[1,] 4.895617
> #$pval.burden
> #[1,] 0.02692495
> 
> ## base case
> pg.out.m2 <- pedgene(ped=example.ped, geno=example.geno, map=example.map, male.dose=2,
+                      weights=NULL, checkpeds=TRUE)
> 
> # summary/print and plot methods for this object
> print.pedgene(pg.out.m2,digits=3)
  gene chrom nvariant stat.kernel pval.kernel.davies stat.burden pval.burden
1   AA     1        7        80.1              0.393        4.90     0.02692
2   AX     X        7       198.2              0.178        7.82     0.00515
> ## standard result to compare against, note pval.kernel.davies different
> ##    gene chrom stat.kernel pval.kernel stat.burden pval.burden
> ## AA   AA     1        80.1       0.404        4.90     0.02692
> ## AX   AX     X       198.2       0.186        7.82     0.00515
> 
> ## try making ped1 disconeeded by taking 2nd-generation parents away
> ## results will differ a little
> pg.out.m2.rm34 <- pedgene(example.ped[-(3:4),], example.geno, example.map, male.dose=2, checkpeds=FALSE)
> pg.out.m2.rm34
  gene chrom nvariant stat.kernel pval.kernel.davies stat.burden pval.burden
1   AA     1        7    80.10206          0.3511292    5.245304 0.022006084
2   AX     X        7   198.18010          0.1599045    8.150547 0.004304818
> 
> ## Test character ids, which is robust now because we're now making super-ids by
> ## pasting ped-person together within the function
> options(stringsAsFactors=FALSE)
> char.ped <- with(example.ped, data.frame(ped=as.character(ped), person=as.character(person), father=as.character(father), mother=as.character(mother), sex=sex, trait=trait))
> options(stringsAsFactors=TRUE)
> 
> ## as long as subject and ped ids are character, not factor, this will work
> ## pedgene makes sure to not treat character as factor 
> pg.out.m2.char <- pedgene(char.ped, example.geno, example.map, male.dose=2, checkpeds=FALSE)
> pg.out.m2.char
  gene chrom nvariant stat.kernel pval.kernel.davies stat.burden pval.burden
1   AA     1        7    80.10206          0.3925961    4.895617  0.02692495
2   AX     X        7   198.18010          0.1777147    7.824525  0.00515420
> 
> ## show that it accepts 23 as X, but recodes 23 to X within the function
> map23 <- example.map
> map23$chrom[map23$chrom=="X"] <- 23
> pg.X23.m2 <- pedgene(ped=example.ped, geno=example.geno, map=map23, male.dose=2,
+                      weights=NULL, checkpeds=TRUE)
> 
> print(pg.X23.m2, digits=3)
  gene chrom nvariant stat.kernel pval.kernel.davies stat.burden pval.burden
1   AA     1        7        80.1              0.393        4.90     0.02692
2   AX     X        7       198.2              0.178        7.82     0.00515
> 
> 
> ## geno row with all NA
> geno.narow <- example.geno
> geno.narow[4,3:ncol(example.geno)] <- NA
> # to check if male dose>1 for males on X chrom -- works 
> #geno.narow[3,3:ncol(example.geno)] <- ifelse(geno.narow[3,2:ncol(example.geno)]==0,0,2)
> pg.narow.m2 <- pedgene(ped=example.ped, geno=geno.narow, map=example.map, male.dose=2,
+                      weights=NULL, checkpeds=TRUE)
> print(pg.narow.m2,digits=3)
  gene chrom nvariant stat.kernel pval.kernel.davies stat.burden pval.burden
1   AA     1        7          76              0.361        5.48     0.01923
2   AX     X        7         182              0.186        8.17     0.00427
> 
> 
> # male dose=1
> pg.out.m1 <- pedgene(example.ped, example.geno, example.map, male.dose=1)
> 
> print(pg.out.m1, digits=3)
  gene chrom nvariant stat.kernel pval.kernel.davies stat.burden pval.burden
1   AA     1        7        80.1              0.393        4.90      0.0269
2   AX     X        7        49.1              0.345        5.29      0.0214
> ##    gene chrom stat.kernel pval.kernel stat.burden pval.burden
> ## AA   AA     1      80.102      0.4039      4.8956    0.026925
> ## AX   AX     X      49.140      0.3568      5.2908    0.021438
> 
> 
> ## test with no map arg (all variants in one gene columns 3:12)
> pg.out.nomap <- pedgene(example.ped, example.geno[,1:12])
> pg.out.nomap
     gene   chrom nvariant stat.kernel pval.kernel.davies stat.burden
1 unknown unknown        7    80.10206          0.3925961    4.895617
  pval.burden
1  0.02692495
> #      gene   chrom stat.kernel pval.kernel.davies stat.burden pval.burden
> # 1 unknown unknown      80.102             0.3926      4.8956    0.026925
> 
> 
> ## Testing first gene with dose=2-dose
> geno.recode <- cbind(example.geno[,1:2], 2-example.geno[,grep("AA", names(example.geno))])
> pg.recode <- pedgene(example.ped, geno.recode, male.dose=2)
> 
> ## note when map not given, assumes all 1 gene, and assigns "unknown" gene/chrom
> pg.recode
     gene   chrom nvariant stat.kernel pval.kernel.davies stat.burden
1 unknown unknown        7    80.10206          0.3925961    4.895617
  pval.burden
1  0.02692495
> 
> 
> 
> ## weights, Madsen-Browning
> maf <- colMeans(example.geno[,-(1:2)]/2)
> ## maf not correct for X matrix, b/c n-alleles for males is not 2
> ## so these results will be a little different for X-chrom
> 
> pg.out.wts.m2 <- pedgene(example.ped, example.geno, map=example.map,
+          weights=1/sqrt((maf*(1-maf))))
> # note stat, pval for AX gene don't match pg.out.m2
> print(pg.out.wts.m2)
  gene chrom nvariant stat.kernel pval.kernel.davies stat.burden pval.burden
1   AA     1        7    80.10206          0.3925961    4.895617 0.026924950
2   AX     X        7   322.93950          0.1764537    7.816898 0.005175997
> 
> ## plot, consider using the unrelated kernel-clustering plot method to show
> ##       regions of clustering more than expected,
> ##       plot gene regions separately
> 
> 
> ## Testing many genes at once:
> 
> genobig <- example.geno
> mapbig <- example.map
> for(k in 2:10) {
+   genobig <- cbind(genobig, example.geno[,-(1:2)])
+   mapbig <- rbind(mapbig, example.map)
+   mapbig$gene[((k-1)*20+1):(20*k)] <- paste(example.map$gene[1:20],k,sep="")
+ }
> 
> ## Add two genes: one with 1 variant. Another with no markers with variance
> genobig <- cbind(genobig, example.geno[,6], rep(1, nrow(example.geno)), rep(2, nrow(example.geno)))
> mapbig <- rbind(mapbig, c(10, "onevar"), c(11,"novar"), c(11, "novar"))
>                 
> 
> pgbig.m2 <- pedgene(example.ped, genobig, mapbig, male.dose=2)
gene: ' novar ' has no markers after removing markers with all same genotype
> pgbig.m1 <- pedgene(example.ped, genobig, mapbig, male.dose=1)
gene: ' novar ' has no markers after removing markers with all same genotype
> 
> print(pgbig.m2, digits=3)
     gene chrom nvariant stat.kernel pval.kernel.davies stat.burden pval.burden
1      AA     1        7       80.10              0.393        4.90     0.02692
2      AX     X        7      198.18              0.178        7.82     0.00515
3     AA2     1        7       80.10              0.393        4.90     0.02692
4     AX2     X        7      198.18              0.178        7.82     0.00515
5     AA3     1        7       80.10              0.393        4.90     0.02692
6     AX3     X        7      198.18              0.178        7.82     0.00515
7     AA4     1        7       80.10              0.393        4.90     0.02692
8     AX4     X        7      198.18              0.178        7.82     0.00515
9     AA5     1        7       80.10              0.393        4.90     0.02692
10    AX5     X        7      198.18              0.178        7.82     0.00515
11    AA6     1        7       80.10              0.393        4.90     0.02692
12    AX6     X        7      198.18              0.178        7.82     0.00515
13    AA7     1        7       80.10              0.393        4.90     0.02692
14    AX7     X        7      198.18              0.178        7.82     0.00515
15    AA8     1        7       80.10              0.393        4.90     0.02692
16    AX8     X        7      198.18              0.178        7.82     0.00515
17    AA9     1        7       80.10              0.393        4.90     0.02692
18    AX9     X        7      198.18              0.178        7.82     0.00515
19   AA10     1        7       80.10              0.393        4.90     0.02692
20   AX10     X        7      198.18              0.178        7.82     0.00515
21 onevar    10        1        1.69              0.193        1.69     0.19306
22  novar    11        0          NA                 NA          NA          NA
> print(pgbig.m1, digits=3)
     gene chrom nvariant stat.kernel pval.kernel.davies stat.burden pval.burden
1      AA     1        7       80.10              0.393        4.90      0.0269
2      AX     X        7       49.14              0.345        5.29      0.0214
3     AA2     1        7       80.10              0.393        4.90      0.0269
4     AX2     X        7       49.14              0.345        5.29      0.0214
5     AA3     1        7       80.10              0.393        4.90      0.0269
6     AX3     X        7       49.14              0.345        5.29      0.0214
7     AA4     1        7       80.10              0.393        4.90      0.0269
8     AX4     X        7       49.14              0.345        5.29      0.0214
9     AA5     1        7       80.10              0.393        4.90      0.0269
10    AX5     X        7       49.14              0.345        5.29      0.0214
11    AA6     1        7       80.10              0.393        4.90      0.0269
12    AX6     X        7       49.14              0.345        5.29      0.0214
13    AA7     1        7       80.10              0.393        4.90      0.0269
14    AX7     X        7       49.14              0.345        5.29      0.0214
15    AA8     1        7       80.10              0.393        4.90      0.0269
16    AX8     X        7       49.14              0.345        5.29      0.0214
17    AA9     1        7       80.10              0.393        4.90      0.0269
18    AX9     X        7       49.14              0.345        5.29      0.0214
19   AA10     1        7       80.10              0.393        4.90      0.0269
20   AX10     X        7       49.14              0.345        5.29      0.0214
21 onevar    10        1        1.69              0.193        1.69      0.1931
22  novar    11        0          NA                 NA          NA          NA
> 
> 
> proc.time()
   user  system elapsed 
  2.918   0.108   3.136 
